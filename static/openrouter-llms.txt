# OpenRouter Quickstart for App Developers

> The simplest way to build AI-powered interactive applications

## Quick Setup

1. **Get your API key**: Sign up at [OpenRouter](https://openrouter.ai) and get your API key from your account settings

2. **Basic chat completion**: Here's all you need to make your first AI request:

## Using the OpenRouter API with fetch

```typescript
fetch('https://openrouter.ai/api/v1/chat/completions', {
  method: 'POST',
  headers: {
    Authorization: 'Bearer <OPENROUTER_API_KEY>',
    'Content-Type': 'application/json',
    // Optional headers for leaderboard visibility
    'HTTP-Referer': '<YOUR_SITE_URL>', 
    'X-Title': '<YOUR_SITE_NAME>'
  },
  body: JSON.stringify({
    model: 'openai/gpt-4o', // Choose any model from the examples below
    messages: [
      {
        role: 'user',
        content: 'What is the meaning of life?',
      },
    ],
  }),
});
```

The API also supports streaming responses. To enable streaming, set the `stream` parameter to `true` in your request:

```typescript
const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
  method: 'POST',
  headers: {
    Authorization: 'Bearer <OPENROUTER_API_KEY>',
    'HTTP-Referer': '<YOUR_SITE_URL>',
    'X-Title': '<YOUR_SITE_NAME>',
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    stream: true,
    model: 'openai/gpt-4o',
    messages: [{ role: 'user', content: 'Write a story about a robot.' }],
  }),
});

// Process the stream
const reader = response.body?.getReader();
const decoder = new TextDecoder();

while (true) {
  const { done, value } = await reader.read();
  if (done) break;
  
  // Decode and parse the chunk
  const chunk = decoder.decode(value);
  const lines = chunk.split('\n').filter(line => line.trim() !== '');
  
  for (const line of lines) {
    if (line.startsWith('data: ')) {
      if (line.includes('[DONE]')) continue;
      
      const json = JSON.parse(line.replace('data: ', ''));
      const content = json.choices[0]?.delta?.content || '';
      console.log(content);
    }
  }
}
```

For error handling, check the response status and error messages:

```typescript
const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
  // ... request configuration
});

if (!response.ok) {
  const error = await response.json();
  console.error(`Error ${response.status}: ${error.message}`);
  throw new Error(`API request failed: ${error.message}`);
}

const result = await response.json();
console.log(result.choices[0].message.content);
```

## Popular Models for Interactive Apps

OpenRouter gives you access to 300+ AI models through a unified API. Here are some popular options across different capabilities and price points:

| Model | Best For | Example Use Case |
|-------|----------|------------------|
| `openai/gpt-4o` | Best overall quality | Complex reasoning, creative content |
| `anthropic/claude-3-opus` | Top-tier reasoning | Research assistants, complex analysis |
| `anthropic/claude-3-haiku` | Fast, affordable | Quick responses, high throughput apps |
| `google/gemini-pro` | Good balance | General purpose applications |
| `mistralai/mistral-large` | Open weights alternative | Commercial applications needing transparency |
| `meta-llama/llama-3-70b-instruct` | Great open model | Custom deployments, offline capabilities |

Explore all 300+ models and compare pricing [on the OpenRouter website](https://openrouter.ai/models).


## Simple Model Routing

OpenRouter makes it easy to handle model fallbacks and routing:

### Automatic Fallbacks

Use the `models` parameter to specify fallbacks if your primary model is unavailable:

```json
{
  "models": ["anthropic/claude-3-opus", "openai/gpt-4o"],
  "messages": [{"role": "user", "content": "Hello!"}]
}
```

### Auto Router

Let OpenRouter pick the best model for your prompt:

```json
{
  "model": "openrouter/auto",
  "messages": [{"role": "user", "content": "Hello!"}]
}
```

## Advanced Features for Interactive Apps

### Structured JSON Outputs

For consistent, parseable responses that follow a strict schema:

```javascript
{
  "messages": [{"role": "user", "content": "Get weather for London"}],
  "model": "openai/gpt-4o",
  "response_format": {
    "type": "json_schema",
    "json_schema": {
      "type": "object",
      "properties": {
        "location": {"type": "string"},
        "temperature": {"type": "number"},
        "conditions": {"type": "string"}
      },
      "required": ["location", "temperature", "conditions"]
    }
  }
}
```

### Tool Calling

Let AI models call functions in your application:

```javascript
{
  "messages": [{"role": "user", "content": "What's the weather in New York?"}],
  "model": "openai/gpt-4o",
  "tools": [{
    "type": "function",
    "function": {
      "name": "get_weather",
      "description": "Get the current weather in a location",
      "parameters": {
        "type": "object",
        "properties": {
          "location": {"type": "string", "description": "City name"},
          "unit": {"type": "string", "enum": ["celsius", "fahrenheit"]}
        },
        "required": ["location"]
      }
    }
  }],
  "tool_choice": "auto"
}
```

### Streaming Responses

Get real-time responses with streaming:

```javascript
const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer <OPENROUTER_API_KEY>',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    stream: true,
    model: 'anthropic/claude-3-haiku',
    messages: [{ role: 'user', content: 'Write a poem about AI' }]
  })
});

// Process the stream
const reader = response.body?.getReader();
const decoder = new TextDecoder();

while (true) {
  const { done, value } = await reader.read();
  if (done) break;
  
  const chunk = decoder.decode(value);
  const lines = chunk.split('\n').filter(line => line.trim() !== '');
  
  for (const line of lines) {
    if (line.startsWith('data: ')) {
      if (line.includes('[DONE]')) continue;
      
      const json = JSON.parse(line.replace('data: ', ''));
      const content = json.choices[0]?.delta?.content || '';
      console.log(content);
    }
  }
}
```

### Web Search Integration

Add real-time web search capabilities to any model by simply adding `:online` to the model name:

```javascript
{
  "model": "openai/gpt-4o:online",
  "messages": [{ "role": "user", "content": "What happened in the news today?" }]
}
```

## Key Parameters

These are the most commonly used parameters for app development:

| Parameter | Description | Example Value |
|-----------|-------------|---------------|
| `temperature` | Controls randomness (0-2) | `0.7` |
| `max_tokens` | Maximum length of response | `1000` |
| `stream` | Enable streaming responses | `true` |
| `tools` | Define functions for the model to call | *see tool calling example* |
| `response_format` | Format responses as JSON | *see structured output example* |

## Error Handling

Implement basic error handling for more robust applications:

```javascript
try {
  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    // request details
  });

  if (!response.ok) {
    const error = await response.json();
    console.error(`Error ${response.status}: ${error.message}`);
    // Handle specific error cases
  }

  const result = await response.json();
  // Process successful response
} catch (error) {
  console.error('Request failed:', error);
  // Handle network or parsing errors
}
```

## Complete Examples

### Simple Chat Application

```javascript
// app.js
async function sendMessage() {
  const userInput = document.getElementById('user-input').value;
  const responseDiv = document.getElementById('response');
  
  responseDiv.innerHTML = '<div class="loading">AI is thinking...</div>';
  
  try {
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer YOUR_API_KEY',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'openai/gpt-4o',
        messages: [
          { role: 'system', content: 'You are a helpful assistant.' },
          { role: 'user', content: userInput }
        ]
      })
    });
    
    const data = await response.json();
    responseDiv.innerHTML = `<div class="ai-response">${data.choices[0].message.content}</div>`;
  } catch (error) {
    responseDiv.innerHTML = `<div class="error">Error: ${error.message}</div>`;
  }
}

// Add this to your HTML
// <input id="user-input" type="text" placeholder="Ask something..."> 
// <button onclick="sendMessage()">Send</button>
// <div id="response"></div>
```

### Weather App with Tool Calling

```javascript
async function getWeather() {
  const locationInput = document.getElementById('location').value;
  const resultDiv = document.getElementById('result');
  
  // Step 1: Send request to AI with tool definition
  const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': 'Bearer YOUR_API_KEY',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: 'openai/gpt-4o',
      messages: [{
        role: 'user', 
        content: `What's the weather like in ${locationInput}?`
      }],
      tools: [{
        type: 'function',
        function: {
          name: 'get_weather',
          description: 'Get current weather for a location',
          parameters: {
            type: 'object',
            properties: {
              location: {
                type: 'string', 
                description: 'City name'
              }
            },
            required: ['location']
          }
        }
      }],
      tool_choice: 'auto'
    })
  });
  
  const data = await response.json();
  
  // Step 2: Process tool call (if any)
  if (data.choices[0].message.tool_calls) {
    const toolCall = data.choices[0].message.tool_calls[0];
    const args = JSON.parse(toolCall.function.arguments);
    
    // Step 3: Call your actual weather API
    const weatherData = await fetchWeatherForLocation(args.location);
    
    // Step 4: Send the results back to the AI
    const finalResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer YOUR_API_KEY',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'openai/gpt-4o',
        messages: [
          {role: 'user', content: `What's the weather like in ${locationInput}?`},
          data.choices[0].message,
          {role: 'tool', tool_call_id: toolCall.id, content: JSON.stringify(weatherData)}
        ]
      })
    });
    
    const finalData = await finalResponse.json();
    resultDiv.innerHTML = finalData.choices[0].message.content;
  } else {
    // Direct response without tool call
    resultDiv.innerHTML = data.choices[0].message.content;
  }
}

// Mock function to fetch weather data
async function fetchWeatherForLocation(location) {
  // In a real app, call a weather API here
  return {
    location: location,
    temperature: 22,
    conditions: "Sunny",
    humidity: 65
  };
}
```

## Build Complete Applications

For more advanced features and a complete list of all available models, parameters, and capabilities, visit the [OpenRouter documentation](https://openrouter.ai/docs).

Happy building!


## Basic Error Handling

For error handling in your applications, you can check the HTTP status code of the response:

```javascript
const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
  method: 'POST',
  headers: {
    Authorization: 'Bearer <OPENROUTER_API_KEY>',
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    model: 'openai/gpt-4o',
    messages: [
      { role: 'user', content: 'What is the meaning of life?' },
    ],
  }),
});

if (!response.ok) {
  const error = await response.json();
  console.error('Error:', error.message);
}
```

## Conclusion

You now have a streamlined guide to using OpenRouter to build interactive AI applications. These essentials should help you get started quickly and effectively.

Remember to replace `<OPENROUTER_API_KEY>` with your actual API key and you're ready to build amazing AI-powered applications!

## Fireproof App Builder notes

If you are in Fireproof app builder, you may already have an API key available at `window.OPENROUTER_API_KEY` you can use it like `Authorization: Bearer ${window.OPENROUTER_API_KEY}`

